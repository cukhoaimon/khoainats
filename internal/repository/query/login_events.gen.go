// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cukhoaimon/khoainats/internal/repository/model"

	"github.com/google/uuid"
)

func newLoginEvent(db *gorm.DB, opts ...gen.DOOption) loginEvent {
	_loginEvent := loginEvent{}

	_loginEvent.loginEventDo.UseDB(db, opts...)
	_loginEvent.loginEventDo.UseModel(&model.LoginEvent{})

	tableName := _loginEvent.loginEventDo.TableName()
	_loginEvent.ALL = field.NewAsterisk(tableName)
	_loginEvent.Id = field.NewField(tableName, "id")
	_loginEvent.IpAddress = field.NewString(tableName, "ip_address")
	_loginEvent.Code = field.NewString(tableName, "code")
	_loginEvent.Attempts = field.NewInt(tableName, "attempts")
	_loginEvent.CreatedAt = field.NewTime(tableName, "created_at")
	_loginEvent.SucceedAt = field.NewTime(tableName, "succeed_at")
	_loginEvent.LastTriedAt = field.NewTime(tableName, "last_tried_at")

	_loginEvent.fillFieldMap()

	return _loginEvent
}

type loginEvent struct {
	loginEventDo

	ALL         field.Asterisk
	Id          field.Field
	IpAddress   field.String
	Code        field.String
	Attempts    field.Int
	CreatedAt   field.Time
	SucceedAt   field.Time
	LastTriedAt field.Time

	fieldMap map[string]field.Expr
}

func (l loginEvent) Table(newTableName string) *loginEvent {
	l.loginEventDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l loginEvent) As(alias string) *loginEvent {
	l.loginEventDo.DO = *(l.loginEventDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *loginEvent) updateTableName(table string) *loginEvent {
	l.ALL = field.NewAsterisk(table)
	l.Id = field.NewField(table, "id")
	l.IpAddress = field.NewString(table, "ip_address")
	l.Code = field.NewString(table, "code")
	l.Attempts = field.NewInt(table, "attempts")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.SucceedAt = field.NewTime(table, "succeed_at")
	l.LastTriedAt = field.NewTime(table, "last_tried_at")

	l.fillFieldMap()

	return l
}

func (l *loginEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *loginEvent) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 7)
	l.fieldMap["id"] = l.Id
	l.fieldMap["ip_address"] = l.IpAddress
	l.fieldMap["code"] = l.Code
	l.fieldMap["attempts"] = l.Attempts
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["succeed_at"] = l.SucceedAt
	l.fieldMap["last_tried_at"] = l.LastTriedAt
}

func (l loginEvent) clone(db *gorm.DB) loginEvent {
	l.loginEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l loginEvent) replaceDB(db *gorm.DB) loginEvent {
	l.loginEventDo.ReplaceDB(db)
	return l
}

type loginEventDo struct{ gen.DO }

type ILoginEventDo interface {
	gen.SubQuery
	Debug() ILoginEventDo
	WithContext(ctx context.Context) ILoginEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILoginEventDo
	WriteDB() ILoginEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILoginEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILoginEventDo
	Not(conds ...gen.Condition) ILoginEventDo
	Or(conds ...gen.Condition) ILoginEventDo
	Select(conds ...field.Expr) ILoginEventDo
	Where(conds ...gen.Condition) ILoginEventDo
	Order(conds ...field.Expr) ILoginEventDo
	Distinct(cols ...field.Expr) ILoginEventDo
	Omit(cols ...field.Expr) ILoginEventDo
	Join(table schema.Tabler, on ...field.Expr) ILoginEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILoginEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILoginEventDo
	Group(cols ...field.Expr) ILoginEventDo
	Having(conds ...gen.Condition) ILoginEventDo
	Limit(limit int) ILoginEventDo
	Offset(offset int) ILoginEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILoginEventDo
	Unscoped() ILoginEventDo
	Create(values ...*model.LoginEvent) error
	CreateInBatches(values []*model.LoginEvent, batchSize int) error
	Save(values ...*model.LoginEvent) error
	First() (*model.LoginEvent, error)
	Take() (*model.LoginEvent, error)
	Last() (*model.LoginEvent, error)
	Find() ([]*model.LoginEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LoginEvent, err error)
	FindInBatches(result *[]*model.LoginEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LoginEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILoginEventDo
	Assign(attrs ...field.AssignExpr) ILoginEventDo
	Joins(fields ...field.RelationField) ILoginEventDo
	Preload(fields ...field.RelationField) ILoginEventDo
	FirstOrInit() (*model.LoginEvent, error)
	FirstOrCreate() (*model.LoginEvent, error)
	FindByPage(offset int, limit int) (result []*model.LoginEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILoginEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	ById(id uuid.UUID) (result model.LoginEvent, err error)
	DeleteById(id uuid.UUID, by uuid.UUID) (result model.LoginEvent, err error)
}

// SELECT * FROM @@table WHERE id = @id
func (l loginEventDo) ById(id uuid.UUID) (result model.LoginEvent, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM login_events WHERE id = ? ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table
// SET deleted_at = now(), deleted_by = @by
// WHERE id = @id
func (l loginEventDo) DeleteById(id uuid.UUID, by uuid.UUID) (result model.LoginEvent, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, by)
	params = append(params, id)
	generateSQL.WriteString("UPDATE login_events SET deleted_at = now(), deleted_by = ? WHERE id = ? ")

	var executeSQL *gorm.DB
	executeSQL = l.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (l loginEventDo) Debug() ILoginEventDo {
	return l.withDO(l.DO.Debug())
}

func (l loginEventDo) WithContext(ctx context.Context) ILoginEventDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l loginEventDo) ReadDB() ILoginEventDo {
	return l.Clauses(dbresolver.Read)
}

func (l loginEventDo) WriteDB() ILoginEventDo {
	return l.Clauses(dbresolver.Write)
}

func (l loginEventDo) Session(config *gorm.Session) ILoginEventDo {
	return l.withDO(l.DO.Session(config))
}

func (l loginEventDo) Clauses(conds ...clause.Expression) ILoginEventDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l loginEventDo) Returning(value interface{}, columns ...string) ILoginEventDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l loginEventDo) Not(conds ...gen.Condition) ILoginEventDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l loginEventDo) Or(conds ...gen.Condition) ILoginEventDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l loginEventDo) Select(conds ...field.Expr) ILoginEventDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l loginEventDo) Where(conds ...gen.Condition) ILoginEventDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l loginEventDo) Order(conds ...field.Expr) ILoginEventDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l loginEventDo) Distinct(cols ...field.Expr) ILoginEventDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l loginEventDo) Omit(cols ...field.Expr) ILoginEventDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l loginEventDo) Join(table schema.Tabler, on ...field.Expr) ILoginEventDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l loginEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILoginEventDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l loginEventDo) RightJoin(table schema.Tabler, on ...field.Expr) ILoginEventDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l loginEventDo) Group(cols ...field.Expr) ILoginEventDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l loginEventDo) Having(conds ...gen.Condition) ILoginEventDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l loginEventDo) Limit(limit int) ILoginEventDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l loginEventDo) Offset(offset int) ILoginEventDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l loginEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILoginEventDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l loginEventDo) Unscoped() ILoginEventDo {
	return l.withDO(l.DO.Unscoped())
}

func (l loginEventDo) Create(values ...*model.LoginEvent) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l loginEventDo) CreateInBatches(values []*model.LoginEvent, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l loginEventDo) Save(values ...*model.LoginEvent) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l loginEventDo) First() (*model.LoginEvent, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginEvent), nil
	}
}

func (l loginEventDo) Take() (*model.LoginEvent, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginEvent), nil
	}
}

func (l loginEventDo) Last() (*model.LoginEvent, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginEvent), nil
	}
}

func (l loginEventDo) Find() ([]*model.LoginEvent, error) {
	result, err := l.DO.Find()
	return result.([]*model.LoginEvent), err
}

func (l loginEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LoginEvent, err error) {
	buf := make([]*model.LoginEvent, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l loginEventDo) FindInBatches(result *[]*model.LoginEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l loginEventDo) Attrs(attrs ...field.AssignExpr) ILoginEventDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l loginEventDo) Assign(attrs ...field.AssignExpr) ILoginEventDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l loginEventDo) Joins(fields ...field.RelationField) ILoginEventDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l loginEventDo) Preload(fields ...field.RelationField) ILoginEventDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l loginEventDo) FirstOrInit() (*model.LoginEvent, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginEvent), nil
	}
}

func (l loginEventDo) FirstOrCreate() (*model.LoginEvent, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LoginEvent), nil
	}
}

func (l loginEventDo) FindByPage(offset int, limit int) (result []*model.LoginEvent, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l loginEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l loginEventDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l loginEventDo) Delete(models ...*model.LoginEvent) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *loginEventDo) withDO(do gen.Dao) *loginEventDo {
	l.DO = *do.(*gen.DO)
	return l
}
