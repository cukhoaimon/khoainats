// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cukhoaimon/khoainats/internal/repository/model"

	"github.com/google/uuid"
)

func newPrincipal(db *gorm.DB, opts ...gen.DOOption) principal {
	_principal := principal{}

	_principal.principalDo.UseDB(db, opts...)
	_principal.principalDo.UseModel(&model.Principal{})

	tableName := _principal.principalDo.TableName()
	_principal.ALL = field.NewAsterisk(tableName)
	_principal.Id = field.NewField(tableName, "id")
	_principal.Type = field.NewInt(tableName, "type")
	_principal.OrganizationId = field.NewField(tableName, "organization_id")
	_principal.CreatedAt = field.NewTime(tableName, "created_at")
	_principal.DeletedAt = field.NewTime(tableName, "deleted_at")
	_principal.DeletedBy = field.NewField(tableName, "deleted_by")

	_principal.fillFieldMap()

	return _principal
}

type principal struct {
	principalDo

	ALL            field.Asterisk
	Id             field.Field
	Type           field.Int
	OrganizationId field.Field
	CreatedAt      field.Time
	DeletedAt      field.Time
	DeletedBy      field.Field

	fieldMap map[string]field.Expr
}

func (p principal) Table(newTableName string) *principal {
	p.principalDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p principal) As(alias string) *principal {
	p.principalDo.DO = *(p.principalDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *principal) updateTableName(table string) *principal {
	p.ALL = field.NewAsterisk(table)
	p.Id = field.NewField(table, "id")
	p.Type = field.NewInt(table, "type")
	p.OrganizationId = field.NewField(table, "organization_id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.DeletedAt = field.NewTime(table, "deleted_at")
	p.DeletedBy = field.NewField(table, "deleted_by")

	p.fillFieldMap()

	return p
}

func (p *principal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *principal) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["id"] = p.Id
	p.fieldMap["type"] = p.Type
	p.fieldMap["organization_id"] = p.OrganizationId
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["deleted_by"] = p.DeletedBy
}

func (p principal) clone(db *gorm.DB) principal {
	p.principalDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p principal) replaceDB(db *gorm.DB) principal {
	p.principalDo.ReplaceDB(db)
	return p
}

type principalDo struct{ gen.DO }

type IPrincipalDo interface {
	gen.SubQuery
	Debug() IPrincipalDo
	WithContext(ctx context.Context) IPrincipalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPrincipalDo
	WriteDB() IPrincipalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPrincipalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPrincipalDo
	Not(conds ...gen.Condition) IPrincipalDo
	Or(conds ...gen.Condition) IPrincipalDo
	Select(conds ...field.Expr) IPrincipalDo
	Where(conds ...gen.Condition) IPrincipalDo
	Order(conds ...field.Expr) IPrincipalDo
	Distinct(cols ...field.Expr) IPrincipalDo
	Omit(cols ...field.Expr) IPrincipalDo
	Join(table schema.Tabler, on ...field.Expr) IPrincipalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPrincipalDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPrincipalDo
	Group(cols ...field.Expr) IPrincipalDo
	Having(conds ...gen.Condition) IPrincipalDo
	Limit(limit int) IPrincipalDo
	Offset(offset int) IPrincipalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPrincipalDo
	Unscoped() IPrincipalDo
	Create(values ...*model.Principal) error
	CreateInBatches(values []*model.Principal, batchSize int) error
	Save(values ...*model.Principal) error
	First() (*model.Principal, error)
	Take() (*model.Principal, error)
	Last() (*model.Principal, error)
	Find() ([]*model.Principal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Principal, err error)
	FindInBatches(result *[]*model.Principal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Principal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPrincipalDo
	Assign(attrs ...field.AssignExpr) IPrincipalDo
	Joins(fields ...field.RelationField) IPrincipalDo
	Preload(fields ...field.RelationField) IPrincipalDo
	FirstOrInit() (*model.Principal, error)
	FirstOrCreate() (*model.Principal, error)
	FindByPage(offset int, limit int) (result []*model.Principal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPrincipalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	ById(id uuid.UUID) (result model.Principal, err error)
	DeleteById(id uuid.UUID, by uuid.UUID) (result model.Principal, err error)
}

// SELECT * FROM @@table WHERE id = @id
func (p principalDo) ById(id uuid.UUID) (result model.Principal, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM principals WHERE id = ? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table
// SET deleted_at = now(), deleted_by = @by
// WHERE id = @id
func (p principalDo) DeleteById(id uuid.UUID, by uuid.UUID) (result model.Principal, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, by)
	params = append(params, id)
	generateSQL.WriteString("UPDATE principals SET deleted_at = now(), deleted_by = ? WHERE id = ? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p principalDo) Debug() IPrincipalDo {
	return p.withDO(p.DO.Debug())
}

func (p principalDo) WithContext(ctx context.Context) IPrincipalDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p principalDo) ReadDB() IPrincipalDo {
	return p.Clauses(dbresolver.Read)
}

func (p principalDo) WriteDB() IPrincipalDo {
	return p.Clauses(dbresolver.Write)
}

func (p principalDo) Session(config *gorm.Session) IPrincipalDo {
	return p.withDO(p.DO.Session(config))
}

func (p principalDo) Clauses(conds ...clause.Expression) IPrincipalDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p principalDo) Returning(value interface{}, columns ...string) IPrincipalDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p principalDo) Not(conds ...gen.Condition) IPrincipalDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p principalDo) Or(conds ...gen.Condition) IPrincipalDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p principalDo) Select(conds ...field.Expr) IPrincipalDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p principalDo) Where(conds ...gen.Condition) IPrincipalDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p principalDo) Order(conds ...field.Expr) IPrincipalDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p principalDo) Distinct(cols ...field.Expr) IPrincipalDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p principalDo) Omit(cols ...field.Expr) IPrincipalDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p principalDo) Join(table schema.Tabler, on ...field.Expr) IPrincipalDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p principalDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPrincipalDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p principalDo) RightJoin(table schema.Tabler, on ...field.Expr) IPrincipalDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p principalDo) Group(cols ...field.Expr) IPrincipalDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p principalDo) Having(conds ...gen.Condition) IPrincipalDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p principalDo) Limit(limit int) IPrincipalDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p principalDo) Offset(offset int) IPrincipalDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p principalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPrincipalDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p principalDo) Unscoped() IPrincipalDo {
	return p.withDO(p.DO.Unscoped())
}

func (p principalDo) Create(values ...*model.Principal) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p principalDo) CreateInBatches(values []*model.Principal, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p principalDo) Save(values ...*model.Principal) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p principalDo) First() (*model.Principal, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Principal), nil
	}
}

func (p principalDo) Take() (*model.Principal, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Principal), nil
	}
}

func (p principalDo) Last() (*model.Principal, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Principal), nil
	}
}

func (p principalDo) Find() ([]*model.Principal, error) {
	result, err := p.DO.Find()
	return result.([]*model.Principal), err
}

func (p principalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Principal, err error) {
	buf := make([]*model.Principal, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p principalDo) FindInBatches(result *[]*model.Principal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p principalDo) Attrs(attrs ...field.AssignExpr) IPrincipalDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p principalDo) Assign(attrs ...field.AssignExpr) IPrincipalDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p principalDo) Joins(fields ...field.RelationField) IPrincipalDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p principalDo) Preload(fields ...field.RelationField) IPrincipalDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p principalDo) FirstOrInit() (*model.Principal, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Principal), nil
	}
}

func (p principalDo) FirstOrCreate() (*model.Principal, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Principal), nil
	}
}

func (p principalDo) FindByPage(offset int, limit int) (result []*model.Principal, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p principalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p principalDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p principalDo) Delete(models ...*model.Principal) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *principalDo) withDO(do gen.Dao) *principalDo {
	p.DO = *do.(*gen.DO)
	return p
}
