// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cukhoaimon/khoainats/internal/repository/model"

	"github.com/google/uuid"
)

func newPrincipalAttribute(db *gorm.DB, opts ...gen.DOOption) principalAttribute {
	_principalAttribute := principalAttribute{}

	_principalAttribute.principalAttributeDo.UseDB(db, opts...)
	_principalAttribute.principalAttributeDo.UseModel(&model.PrincipalAttribute{})

	tableName := _principalAttribute.principalAttributeDo.TableName()
	_principalAttribute.ALL = field.NewAsterisk(tableName)
	_principalAttribute.Id = field.NewField(tableName, "id")
	_principalAttribute.PrincipalId = field.NewField(tableName, "principal_id")
	_principalAttribute.Attribute = field.NewInt(tableName, "attribute")
	_principalAttribute.AttributeValue = field.NewString(tableName, "attribute_value")
	_principalAttribute.CreatedAt = field.NewTime(tableName, "created_at")
	_principalAttribute.CreatedBy = field.NewField(tableName, "created_by")
	_principalAttribute.DeletedAt = field.NewTime(tableName, "deleted_at")
	_principalAttribute.DeletedBy = field.NewTime(tableName, "deleted_by")

	_principalAttribute.fillFieldMap()

	return _principalAttribute
}

type principalAttribute struct {
	principalAttributeDo

	ALL            field.Asterisk
	Id             field.Field
	PrincipalId    field.Field
	Attribute      field.Int
	AttributeValue field.String
	CreatedAt      field.Time
	CreatedBy      field.Field
	DeletedAt      field.Time
	DeletedBy      field.Time

	fieldMap map[string]field.Expr
}

func (p principalAttribute) Table(newTableName string) *principalAttribute {
	p.principalAttributeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p principalAttribute) As(alias string) *principalAttribute {
	p.principalAttributeDo.DO = *(p.principalAttributeDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *principalAttribute) updateTableName(table string) *principalAttribute {
	p.ALL = field.NewAsterisk(table)
	p.Id = field.NewField(table, "id")
	p.PrincipalId = field.NewField(table, "principal_id")
	p.Attribute = field.NewInt(table, "attribute")
	p.AttributeValue = field.NewString(table, "attribute_value")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.CreatedBy = field.NewField(table, "created_by")
	p.DeletedAt = field.NewTime(table, "deleted_at")
	p.DeletedBy = field.NewTime(table, "deleted_by")

	p.fillFieldMap()

	return p
}

func (p *principalAttribute) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *principalAttribute) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.Id
	p.fieldMap["principal_id"] = p.PrincipalId
	p.fieldMap["attribute"] = p.Attribute
	p.fieldMap["attribute_value"] = p.AttributeValue
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["created_by"] = p.CreatedBy
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["deleted_by"] = p.DeletedBy
}

func (p principalAttribute) clone(db *gorm.DB) principalAttribute {
	p.principalAttributeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p principalAttribute) replaceDB(db *gorm.DB) principalAttribute {
	p.principalAttributeDo.ReplaceDB(db)
	return p
}

type principalAttributeDo struct{ gen.DO }

type IPrincipalAttributeDo interface {
	gen.SubQuery
	Debug() IPrincipalAttributeDo
	WithContext(ctx context.Context) IPrincipalAttributeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPrincipalAttributeDo
	WriteDB() IPrincipalAttributeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPrincipalAttributeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPrincipalAttributeDo
	Not(conds ...gen.Condition) IPrincipalAttributeDo
	Or(conds ...gen.Condition) IPrincipalAttributeDo
	Select(conds ...field.Expr) IPrincipalAttributeDo
	Where(conds ...gen.Condition) IPrincipalAttributeDo
	Order(conds ...field.Expr) IPrincipalAttributeDo
	Distinct(cols ...field.Expr) IPrincipalAttributeDo
	Omit(cols ...field.Expr) IPrincipalAttributeDo
	Join(table schema.Tabler, on ...field.Expr) IPrincipalAttributeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPrincipalAttributeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPrincipalAttributeDo
	Group(cols ...field.Expr) IPrincipalAttributeDo
	Having(conds ...gen.Condition) IPrincipalAttributeDo
	Limit(limit int) IPrincipalAttributeDo
	Offset(offset int) IPrincipalAttributeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPrincipalAttributeDo
	Unscoped() IPrincipalAttributeDo
	Create(values ...*model.PrincipalAttribute) error
	CreateInBatches(values []*model.PrincipalAttribute, batchSize int) error
	Save(values ...*model.PrincipalAttribute) error
	First() (*model.PrincipalAttribute, error)
	Take() (*model.PrincipalAttribute, error)
	Last() (*model.PrincipalAttribute, error)
	Find() ([]*model.PrincipalAttribute, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PrincipalAttribute, err error)
	FindInBatches(result *[]*model.PrincipalAttribute, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PrincipalAttribute) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPrincipalAttributeDo
	Assign(attrs ...field.AssignExpr) IPrincipalAttributeDo
	Joins(fields ...field.RelationField) IPrincipalAttributeDo
	Preload(fields ...field.RelationField) IPrincipalAttributeDo
	FirstOrInit() (*model.PrincipalAttribute, error)
	FirstOrCreate() (*model.PrincipalAttribute, error)
	FindByPage(offset int, limit int) (result []*model.PrincipalAttribute, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPrincipalAttributeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	ById(id uuid.UUID) (result model.PrincipalAttribute, err error)
	DeleteById(id uuid.UUID, by uuid.UUID) (result model.PrincipalAttribute, err error)
}

// SELECT * FROM @@table WHERE id = @id
func (p principalAttributeDo) ById(id uuid.UUID) (result model.PrincipalAttribute, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM principal_attributes WHERE id = ? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// UPDATE @@table
// SET deleted_at = now(), deleted_by = @by
// WHERE id = @id
func (p principalAttributeDo) DeleteById(id uuid.UUID, by uuid.UUID) (result model.PrincipalAttribute, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, by)
	params = append(params, id)
	generateSQL.WriteString("UPDATE principal_attributes SET deleted_at = now(), deleted_by = ? WHERE id = ? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p principalAttributeDo) Debug() IPrincipalAttributeDo {
	return p.withDO(p.DO.Debug())
}

func (p principalAttributeDo) WithContext(ctx context.Context) IPrincipalAttributeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p principalAttributeDo) ReadDB() IPrincipalAttributeDo {
	return p.Clauses(dbresolver.Read)
}

func (p principalAttributeDo) WriteDB() IPrincipalAttributeDo {
	return p.Clauses(dbresolver.Write)
}

func (p principalAttributeDo) Session(config *gorm.Session) IPrincipalAttributeDo {
	return p.withDO(p.DO.Session(config))
}

func (p principalAttributeDo) Clauses(conds ...clause.Expression) IPrincipalAttributeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p principalAttributeDo) Returning(value interface{}, columns ...string) IPrincipalAttributeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p principalAttributeDo) Not(conds ...gen.Condition) IPrincipalAttributeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p principalAttributeDo) Or(conds ...gen.Condition) IPrincipalAttributeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p principalAttributeDo) Select(conds ...field.Expr) IPrincipalAttributeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p principalAttributeDo) Where(conds ...gen.Condition) IPrincipalAttributeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p principalAttributeDo) Order(conds ...field.Expr) IPrincipalAttributeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p principalAttributeDo) Distinct(cols ...field.Expr) IPrincipalAttributeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p principalAttributeDo) Omit(cols ...field.Expr) IPrincipalAttributeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p principalAttributeDo) Join(table schema.Tabler, on ...field.Expr) IPrincipalAttributeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p principalAttributeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPrincipalAttributeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p principalAttributeDo) RightJoin(table schema.Tabler, on ...field.Expr) IPrincipalAttributeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p principalAttributeDo) Group(cols ...field.Expr) IPrincipalAttributeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p principalAttributeDo) Having(conds ...gen.Condition) IPrincipalAttributeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p principalAttributeDo) Limit(limit int) IPrincipalAttributeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p principalAttributeDo) Offset(offset int) IPrincipalAttributeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p principalAttributeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPrincipalAttributeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p principalAttributeDo) Unscoped() IPrincipalAttributeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p principalAttributeDo) Create(values ...*model.PrincipalAttribute) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p principalAttributeDo) CreateInBatches(values []*model.PrincipalAttribute, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p principalAttributeDo) Save(values ...*model.PrincipalAttribute) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p principalAttributeDo) First() (*model.PrincipalAttribute, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrincipalAttribute), nil
	}
}

func (p principalAttributeDo) Take() (*model.PrincipalAttribute, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrincipalAttribute), nil
	}
}

func (p principalAttributeDo) Last() (*model.PrincipalAttribute, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrincipalAttribute), nil
	}
}

func (p principalAttributeDo) Find() ([]*model.PrincipalAttribute, error) {
	result, err := p.DO.Find()
	return result.([]*model.PrincipalAttribute), err
}

func (p principalAttributeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PrincipalAttribute, err error) {
	buf := make([]*model.PrincipalAttribute, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p principalAttributeDo) FindInBatches(result *[]*model.PrincipalAttribute, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p principalAttributeDo) Attrs(attrs ...field.AssignExpr) IPrincipalAttributeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p principalAttributeDo) Assign(attrs ...field.AssignExpr) IPrincipalAttributeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p principalAttributeDo) Joins(fields ...field.RelationField) IPrincipalAttributeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p principalAttributeDo) Preload(fields ...field.RelationField) IPrincipalAttributeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p principalAttributeDo) FirstOrInit() (*model.PrincipalAttribute, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrincipalAttribute), nil
	}
}

func (p principalAttributeDo) FirstOrCreate() (*model.PrincipalAttribute, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PrincipalAttribute), nil
	}
}

func (p principalAttributeDo) FindByPage(offset int, limit int) (result []*model.PrincipalAttribute, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p principalAttributeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p principalAttributeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p principalAttributeDo) Delete(models ...*model.PrincipalAttribute) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *principalAttributeDo) withDO(do gen.Dao) *principalAttributeDo {
	p.DO = *do.(*gen.DO)
	return p
}
